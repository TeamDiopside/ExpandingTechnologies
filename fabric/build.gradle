plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    Project common = project(":common")
    accessWidenerPath = common.loom.accessWidenerPath

    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=expandingtechnologies"
            vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

            runDir "build/datagen"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        name 'Progwm16 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://jitpack.io/" }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven {
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // forge config api port
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

configurations.configureEach {
    resolutionStrategy.eachDependency {
        if (requested.module.name == "fabric-loader") {
            useVersion(fabric_loader_version)
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

    modApi "net.minecraftforge:forgeconfigapiport-fabric:${forge_config_api_port_version}"

    modImplementation("com.github.Chocohead:Fabric-ASM:v2.3") {
        exclude (group: "net.fabricmc.fabric-api")
    }
    include "com.github.Chocohead:Fabric-ASM:v2.3"

    modCompileOnly("curse.maven:create-steam-n-rails-688231:${steam_n_rails_fabric_id}")

    modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
    modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")

    //modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
    //modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "expandingtechnologies"
    versionNumber = "${rootProject.mod_version}-fabric-1.20.1"
    versionName = "${rootProject.mod_version} Fabric 1.20.1"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = ["1.20.1"]
    loaders = ["fabric"]
    dependencies {
        required.project "architectury-api"
        required.project "fabric-api"
        required.project "create"
    }
    changelog = rootProject.file("CHANGELOG_LATEST.md").text

    syncBodyFrom = rootProject.file("README.md").text
    tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
}

curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = "884893"
        changelog = rootProject.file("CHANGELOG_LATEST.md").text
        changelogType = "markdown"
        releaseType = "release"
        addGameVersion "1.20.1"
        addGameVersion "Fabric"

        relations {
            requiredDependency "architectury-api"
            requiredDependency "fabric-api"
            requiredDependency "create"
        }
        mainArtifact(remapJar) {
            displayName = "${rootProject.mod_version} Fabric 1.20.1"
        }
        options {
            javaVersionAutoDetect = false
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}